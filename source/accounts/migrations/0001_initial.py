# Generated by Django 5.0.3 on 2024-03-13 15:16

import accounts.managers
import accounts.models.role
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True, verbose_name='Роль')),
                ('privileges', accounts.models.role.ChoiceArrayField(base_field=models.CharField(blank=True, choices=[('ALLOW_ROLE_READ', 'Привилегия на просмотр ролей'), ('ALLOW_ROLE_CREATE', 'Привилегия на создание ролей'), ('ALLOW_ROLE_UPDATE', 'Привилегия на обновление данных ролей'), ('ALLOW_ROLE_DELETE', 'Привилегия на удаление ролей'), ('ALLOW_USER_ROLE_UPDATE', 'Привилегия на обновление роли пользователя'), ('RESIDENT_PRIVILEGE', 'Привилегия Резидента'), ('ALLOW_EVENT_CREATE', 'Привилегия на создание мероприятия'), ('ALLOW_EVENT_UPDATE', 'Привилегия на обновление данных мероприятия'), ('ALLOW_EVENT_DELETE', 'Привилегия на удаление мероприятия'), ('ALLOW_NEWS_CREATE', 'Привилегия на создание новости'), ('ALLOW_NEWS_UPDATE', 'Привилегия на обновление данных новости'), ('ALLOW_NEWS_DELETE', 'Привилегия на удаление новости'), ('ALLOW_REQUEST_CREATE', 'Привилегия на создание запроса'), ('ALLOW_REQUEST_UPDATE', 'Привилегия на обновление данных запроса'), ('ALLOW_REQUEST_DELETE', 'Привилегия на удаление запроса'), ('ALLOW_REQUEST_FROM_ALL_RESIDENT_READ', 'Привилегия на просмотр всех запросов'), ('ALLOW_REQUEST_WRITE_RESPONSE', 'Привилегия на написание ответа запросу'), ('ALLOW_RESIDENT_BOOKED_READ', 'Привилегия на просмотр, забранированных на мероприятие, резидентов'), ('ALLOW_RESIDENT_BOOKING', 'Привилегия на удовлетворение брони резидента'), ('ALLOW_VOTE_CREATE', 'Привилегия на создание голосования'), ('ALLOW_RESIDENT_UPDATE', 'Привилегия на обновление данных резидента'), ('ALLOW_CHAT_CREATE', 'Привилегия на создание чата'), ('ALLOW_CHAT_UPDATE', 'Привилегия на обновление данных чата')], max_length=100), blank=True, default=list, size=None, verbose_name='Привилегии')),
            ],
        ),
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Электронная почта')),
                ('phone', models.CharField(blank=True, max_length=30, verbose_name='Номер телефона')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='Имя')),
                ('second_name', models.CharField(blank=True, max_length=30, verbose_name='Фамилия')),
                ('status_active', models.BooleanField(default=True, verbose_name='Статус активности')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('role', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='role_for_account', to='accounts.role', verbose_name='Роль')),
            ],
            options={
                'verbose_name': 'Профиль',
                'verbose_name_plural': 'Профили',
            },
            managers=[
                ('object', accounts.managers.UserManager()),
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
